// gradle脚本自身所需要的构建的环境
buildscript {
    // 定义变量
    ext {
        ALI_REPOSITORY_URL = 'https://maven.aliyun.com/repository/public/'
        ALI_REPOSITORY_PLUGIN_URL = 'https://maven.aliyun.com/repository/gradle-plugin'
    }
    repositories {
        maven { url ALI_REPOSITORY_URL }
        mavenCentral()
    }

    // 构建时所需要的插件或者是其他的依赖
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply from: 'config.gradle'

def versions = rootProject.ext.versions
println '************统一版本管理****************'
println versions
println '************统一版本管理****************'

description = "Pure gradle Build"
defaultTasks 'build'

ext {
    // 定义一些其他的属性
}

// 1. allproject 写法 一
configure(allprojects) { project ->
    println "allproject另一种写法：$project"
}

// 2. allproject 写法二
// 用于多项目构建，包括子module的仓库地址
gradle.allprojects {
//configure(allprojects) { project2 ->

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    // quality check
    apply plugin: 'pmd'

    println "当前工程 $project"

    // 构建生命周期监控，可以在每个项目中单独配置，也可以在allprojects中统一配置
    beforeEvaluate { project ->
        println "开始评估 $project"
    }
    afterEvaluate { project, state ->
        println "$project 评估是否成功：${state.failure == null}"
    }

    // 设定全局编码 以及java版本
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencies {
        pmd 'com.alibaba.p3c:p3c-pmd:2.1.1'
    }

    pmd {
        consoleOutput = true
        reportsDir = file("build/reports/pmd")
        ruleSets = [
//                'java-ali-comment',
//                'java-ali-concurrent',
//                'java-ali-constant',
                'java-ali-exception',
//                'java-ali-flowcontrol',
//                'java-ali-naming',
//                'java-ali-oop',
//                'java-ali-orm',
//                'java-ali-other',
//                'java-ali-set',
        ]
    }

}

subprojects {
    // 声明版本
    group = 'com.kute'
    version = "${pureVersion}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    /**
     * 'io.spring.dependency-management' 插件的依赖管理配置
     */
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {

        imports {
            mavenBom "com.fasterxml.jackson:jackson-bom:2.12.1"
            mavenBom "io.netty:netty-bom:4.1.59.Final"
            mavenBom "io.projectreactor:reactor-bom:2020.0.4"
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudDependencyVersion"
        }

        dependencies {
            // 声明单个依赖的版本
            dependency group: 'com.google.guava', name: 'guava', version: "$guavaVersion"

            dependency group: 'junit', name: 'junit', version: '4.1.2'

            // 依赖排除
//            dependency('org.springframework:spring-core:5.3.3') {
//                exclude 'commons-logging:commons-logging'
//            }

            // 依赖集合
            dependencySet(group: 'org.slf4j', version: '1.7.7') {
                entry 'slf4j-api'
                entry 'slf4j-simple'
            }
            // 依赖集合排除
            dependencySet(group: 'org.springframework', version: "${springVersion}") {
                entry('spring-core') {
                    exclude group: 'commons-logging', name: 'commons-logging'
                }
            }
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }
}

/* tasks */

//输出所有的仓库地址
/*task showRepos {
    doLast {
        println "All repos:"
        repositories.each {
             println "repository: ${it.name} ('${it.url}')"
        }
    }
}*/

// 定制gradle wrapper
//tasks.named('wrapper') {
//    distributionType = Wrapper.DistributionType.ALL
//}

