// gradle脚本自身所需要的构建的环境
buildscript {
    // 定义变量
    ext {
        ALI_REPOSITORY_URL = 'https://maven.aliyun.com/repository/public/'
        ALI_REPOSITORY_PLUGIN_URL = 'https://maven.aliyun.com/repository/gradle-plugin'
    }
    repositories {
        maven { url ALI_REPOSITORY_URL }
        mavenCentral()
    }

    // 构建时所需要的插件或者是其他的依赖
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

/*plugins {
    *//*
    * https://plugins.gradle.org/plugin/io.spring.dependency-management
    * https://docs.spring.io/dependency-management-plugin/docs/current-SNAPSHOT/reference/html/
    *//*
    id 'io.spring.dependency-management'
}

*//**
 * 'io.spring.dependency-management' 插件的依赖管理配置
 *//*
dependencyManagement {
    dependencies {
        // 声明单个依赖的版本
        dependency group: 'com.google.guava', name: 'guava', version: '30.1-jre'

        // 依赖排除
        *//*dependency('org.springframework:spring-core:5.3.3') {
            exclude 'commons-logging:commons-logging'
        }*//*

        // 声明多个
        dependencySet(group: 'org.slf4j', version: '1.7.7') {
            entry 'slf4j-api'
            entry 'slf4j-simple'
        }

        dependencySet(group: 'org.springframework', version: '5.3.3') {
            entry('spring-core') {
                exclude group: 'commons-logging', name: 'commons-logging'
            }
        }

    }
}*/

apply from: 'config.gradle'

def versions = rootProject.ext.versions
println '************统一版本管理****************'
println versions
println '************统一版本管理****************'

description = "Pure gradle Build"
defaultTasks 'build'

// 用于多项目构建，包括子module的仓库地址
allprojects {

    // 声明版本
    group = 'com.kute'
    version = '${pureVersion}'

    // 构建生命周期监控，可以在每个项目中单独配置，也可以在allprojects中统一配置
    beforeEvaluate { project ->
        println "开始评估 $project"
    }
    afterEvaluate { project, state ->
        println "$project 评估是否成功：${state.failure == null}"
    }

    // 设定全局编码 以及java版本
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

/* tasks */

//输出所有的仓库地址
/*task showRepos {
    doLast {
        println "All repos:"
        repositories.each {
             println "repository: ${it.name} ('${it.url}')"
        }
    }
}*/

// 定制gradle wrapper
//tasks.named('wrapper') {
//    distributionType = Wrapper.DistributionType.ALL
//}

